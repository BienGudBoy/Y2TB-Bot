var tagsPerPage = 20;

async function init(){
    return{
        "pluginName": "HentaiZ",
        "pluginMain": "hentaiz.js",
        "commandList": {
			"tags": {
                "help": {
                    "vi_VN": "[trang]",
                    "en_US": "[page]"
                },
                "tag": {
                    "vi_VN": "Tags trên Hentaiz",
                    "en_US": "Tags on Hentaiz"
                },
                "mainFunc": "category"
            },
			"posts": {
                "help": {
                    "vi_VN": "<ID truyện>",
                    "en_US": "<story ID>"
                },
                "tag": {
                    "vi_VN": "Truyện trên Hentaiz",
                    "en_US": "Stories on Hentaiz"
                },
                "mainFunc": "posts"
            },
			"search": {
                "help": {
                    "vi_VN": "<tên truyện>",
                    "en_US": "<story name>"
                },
                "tag": {
                    "vi_VN": "Tìm truyện trên Hentaiz",
                    "en_US": "Find stories on Hentaiz"
                },
                "mainFunc": "search"
            },
			"crawl": {
                "help": {
                    "vi_VN": "[]",
                    "en_US": "[]"
                },
                "tag": {
                    "vi_VN": "Cào ảnh trên kho ảnh Hentaiz",
                    "en_US": "Crawl image from Hentaiz's storage"
                },
                "mainFunc": "crawl"
            }
        },
        "nodeDepends":{
            "puppeteer-extra": "",
			"puppeteer-extra-plugin-stealth": "",
			"random-useragent": "",
			"he": "",
			"cherio": "",
			"axios": ""
        },
        "langMap":{
            "notInbox":{
                "desc": "lang khi bot nhận lệnh devupload mà không phải trong inbox với bot",
                "vi_VN": "Hãy sử dụng lệnh trong inbox của bot để tránh lộ thông tin đăng nhập!",
                "en_US": "Please inbox bot to use this command to avoid account leaks!",
                "args": {}
            }
		},
        "author": "HyTommy",
        "version": "0.0.1"
    }
}

async function category (data, api){
	var htmlDecode = require("he");
	var axios = require("axios");
	var tags = {};
	if(Object.keys(tags).length == 0){
		var res = await getdata(`https://hentaiz.top/wp-json/wp/v2/categories?per_page=100`);
		tags.res = res;
		tags.pages = [];
		tags.names = {};
		tags.slugs = {};
		var i = 0;
		var count = 0;
		var count1 = 0;
		while(count1 <= res.length){
			!tags.pages[i] ? tags.pages[i] = [] : "";
			tags.pages[i].push({
				id: res[count].id,
				name: res[count].name,
				desc: res[count].description != "" ? res[count].description : "Search google thử đi :>>"
			});
			count++;
			count1++;
			if(count == 19){
				count = 0;
				i++;
			}
		}
		for(i=0;i<res.length;i++){
			tags.names[res[i].name] = res[i].id;
			tags.slugs[res[i].slug.replace("-", " ")] = res[i].id;
		}
	}
	var page;
	data.body != "" && data.body != " " ? page = data.body : page = "1";
	if(isNaN(page) || page.indexOf(".") != -1){
		page = removeVietnameseTones(page);
		var x = findBestMatch(page, tags.names);
		var y = findBestMatch(page, tags.slugs);
		var z;
		if(x.bestMatch.rating <= 0.3 && y.bestMatch.rating <= 0.3) return api.sendMessage("Không tìm thấy tag!", data.threadID, data.messageID)
		x.bestMatch.rating > y.bestMatch.rating ? z = x : z = y;
		var res2 = await getdata(`https://hentaiz.top/wp-json/wp/v2/posts?categories=${res[z.bestMatchIndex].id}&per_page=100`);
		var random = [];
		for(i=0;i<3;i++){
			var eng;
			eng = Math.floor(Math.random() * res2.length);
			while (random.indexOf(eng) != -1){
				eng = Math.floor(Math.random() * res2.length);
			}
			random.push(eng);
		}
		var imagelinks = [];
		for(i=0;i<random.length;i++){
			var imagelink  = await getimage(res2[random[i]].link, "img");
			imagelinks.push(imagelink[1]);
		};
		var filename = [];
		imagelinks.forEach((x) => {
			filename.push(axios({
				url: x,
				method: "GET",
				responseType: "stream",
				headers: {
					'Content-Type': 'application/json'
				}
			}));
		});
		var filename = (await Promise.all(filename)).map(x => x.data);
		api.sendMessage({
			body: `${names[z.bestMatchIndex]} (ID: ${res[z.bestMatchIndex].id})\n  - ${res[z.bestMatchIndex].description}\n  - Số bộ truyện hiện có: ${res[z.bestMatchIndex].count}\n  - Một số truyện thuộc thể loại này:\n    + ${htmlDecode.decode(res2[random[0]].title.rendered)} (ID: ${res2[random[0]].id})\n    + ${htmlDecode.decode(res2[random[1]].title.rendered)} (ID: ${res2[random[1]].id})\n    + ${htmlDecode.decode(res2[random[2]].title.rendered)} (ID: ${res2[random[2]].id})`,
			attachment: filename
		}, data.threadID, data.messageID);
	}
	else {
		var str = "Các tags:\n";
		for(i=0;i<tagsPerPage;i++){
			str += `${tags.pages[page - 1][i].name} (ID: ${tags.pages[page - 1][i].id}):\n  - ${tags.pages[page - 1][i].desc}\n\n`;
		};
		str += `\nTrang ${page}`;
		api.sendMessage(str, data.threadID, data.messageID);
	}
}	

async function posts (data, api){
	var htmlDecode = require("he");
	var axios = require("axios");
	if(data.body == "") return api.sendMessage("Thiếu ID!", data.threadID, data.messageID);
	var res = await getdata(`https://hentaiz.top/wp-json/wp/v2/posts/${data.body}`);
	if(res.data != undefined) return api.sendMessage(`Không tồn tại bộ truyện với ID này!`, data.threadID, data.messageID);
	var str = `${htmlDecode.decode(res.title.rendered)}\n`;
	if(res.categories.length != 0){
		var res2 = await getdata(`https://hentaiz.top/wp-json/wp/v2/categories?per_page=100`);
		var category = [];
		res2.forEach(x => { 
			if(res.categories.indexOf(x.id) != -1) category.push(x.name);
		});
		str += `  - Thể loại: ${category.join(", ")}\n`;
	}
	if(res.studio.length != 0){
		var studio = [];
		for(i=0;i<res.studio.length;i++){
			var res2 = await getdata(`https://hentaiz.top/wp-json/wp/v2/studio/${res.studio[i]}`);
			studio.push(htmlDecode.decode(res2.name));
		}
		str += `  - Tác giả: ${studio.join(", ")}\n`;
	}
	if(res.release_year.length != 0){
		var release_year = [];
		for(i=0;i<res.release_year.length;i++){
			var res2 = await getdata(`https://hentaiz.top/wp-json/wp/v2/release_year/${res.release_year[i]}`);
			release_year.push(htmlDecode.decode(res2.name));
		}
		str += `  - Năm sáng tác: ${release_year.join(", ")}\n`;
	}
	if(res.tags.length != 0){
		str += `  - Một số bộ truyện liên quan:\n`
		for(i=0;i<res.tags.length;i++){
			var res2 = await getdata(`https://hentaiz.top/wp-json/wp/v2/tags/${res.tags[i]}`);
			str += `    + ${htmlDecode.decode(res2.name)} (ID: ${res2.id})\n`
		}
	}
	str += `  - Miêu tả: ${removeHTMLTags(htmlDecode.decode(res.content.rendered))}`
	var link = await getimage(res.link, "img");
	var filename = [
		axios({
			url: link[1],
			method: "GET",
			responseType: "stream",
			headers: {
				'Content-Type': 'application/json'
			}
		})
	];
	var filename = (await Promise.all(filename)).map(x => x.data);
	api.sendMessage({
		body: str,
		attachment: filename
	}, data.threadID, data.messageID);
	
}

async function search (data, api){
	var htmlDecode = require("he");
	var axios = require("axios");
	var args = data.body;
	switch(args){
		case "":
			api.sendMessage(`Thêm 1 trong các yếu tốt sau để tìm hiểu chi tiết hơn:\n\n  - "new": 3 bộ mới nhất\n  - "random": 1 bộ bất kỳ\n  - Gõ tên truyện để tìm kiếm`, data.threadID, data.messageID);
			break;
		case "new":
			var res = await getdata("https://hentaiz.top/wp-json/wp/v2/posts?per_page=3");
			var str = "";
			var imagelinks = [];
			for(i=0;i<res.length;i++){
				var imagelink = await getimage(res[i].link, "img");
				imagelinks.push(imagelink[1]);
			}
			for(i=0;i<res.length;i++){
				str += `${i + 1}. ${htmlDecode.decode(res[i].title.rendered)} (ID: ${res[i].id})\n  - ${removeHTMLTags(htmlDecode.decode(res[i].content.rendered))}\n\n`;
			}
			var filename = [];
			imagelinks.forEach((x) => {
				filename.push(axios({
					url: x,
					method: "GET",
					responseType: "stream",
					headers: {
						'Content-Type': 'application/json'
					}
				}));
			});
			var filename = (await Promise.all(filename)).map(x => x.data);
			api.sendMessage({
				body: str,
				attachment: filename
			}, data.threadID, data.messageID);
			break;
		case "random":
			var res = await getdata("https://hentaiz.top/wp-json/wp/v2/posts?per_page=100");
			var post = res[Math.floor(Math.random() * res.length)];
			var str = `${htmlDecode.decode(post.title.rendered)} (ID: ${post.id})\n  - ${removeHTMLTags(htmlDecode.decode(post.content.rendered))}\n\n`;
			var link = await getimage(post.link, "img");
			var filename = [
				axios({
					url: link[1],
					method: "GET",
					responseType: "stream",
					headers: {
						'Content-Type': 'application/json'
					}
				})
			];
			var filename = (await Promise.all(filename)).map(x => x.data);
			api.sendMessage({
				body: str,
				attachment: filename
			}, data.threadID, data.messageID);
			break;
		default:
			var res = await getdata(`https://hentaiz.top/wp-json/wp/v2/posts?search=${args}&per_page=6`);
			var str = "Có phải bạn đang tìm kiếm:\n\n";
			var imagelinks = [];
			for(i=0;i<res.length;i++){
				var imagelink = await getimage(res[i].link, "img");
				imagelinks.push(imagelink[1]);
			}
			for(i=0;i<res.length;i++){
				str += `${i + 1}. ${htmlDecode.decode(res[i].title.rendered)} (ID: ${res[i].id})\n  - ${removeHTMLTags(htmlDecode.decode(res[i].content.rendered))}\n\n`;
			}
			var filename = [];
			imagelinks.forEach((x) => {
				filename.push(axios({
					url: x,
					method: "GET",
					responseType: "stream",
					headers: {
						'Content-Type': 'application/json'
					}
				}));
			});
			var filename = (await Promise.all(filename)).map(x => x.data);
			api.sendMessage({
				body: str,
				attachment: filename
			}, data.threadID, data.messageID);
			break;
	}
}

async function crawl (data, api){
	var axios = require("axios");
	var args = data.body.split(" ");
	var choice = ["anime", "hentai", "gai", "gai18", "yuri", "yaoi", "futa", "furry"];
	if(data.body == "") return api.sendMessage(`Thêm 1 trong các yếu tốt sau để tìm hiểu chi tiết hơn:\n\n  - "anime": Ảnh anime, ecchi\n  - "hentai": Ảnh hentai\n  - "gai": Ảnh gái thường\n  - "gai18": Ảnh gái 18+\n  - "yuri": Ảnh gái x gái\n  - "yaoi": Ảnh trai x trai\n  - "futa": Ảnh cú có gai\n  - "furry": Ảnh furry\n\n  - Thêm số trang để lựa trang, mặc định để trống là 1`, data.threadID, data.messageID);
	args[1] == undefined ? args[1] = "1": "";
	var url = "";
	var tpe = "";
	switch(args[0]){
		case "anime": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=616622316356501515`; type = "img"; break;
		case "hentai": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=616616204781617152`; type = "img"; break;
		case "gai": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=781870041862897684`; type = "img"; break;
		case "gai18": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=781870218192355329`; type = "img"; break;
		case "yuri": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=616622475773476884`; type = "img"; break;
		case "yaoi": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=622677459690717185`; type = "img"; break;
		case "futa": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=616622496765968427`; type = "img"; break;
		case "furry": url = `https://hentaiz.top/gallery/page/${args[1]}/?channels%5B%5D=622677550065516554`; type = "img"; break;
		default: return api.sendMessage(`Sai yếu tố, sau đây là những yếu tố hiện có:\n\n  - "anime": Ảnh anime, ecchi\n  - "hentai": Ảnh hentai\n  - "gai": Ảnh gái thường\n  - "gai18": Ảnh gái 18+\n  - "yuri": Ảnh gái x gái\n  - "yaoi": Ảnh trai x trai\n  - "futa": Ảnh cú có gai\n  - "furry": Ảnh furry\n\n  - Thêm số trang để lựa trang, mặc định để trống là 1`, data.threadID, data.messageID); break;
	}
	var res = await getimage(url, type);
	res = res.filter(url => url.slice(0, 40) == "https://media.discordapp.net/attachments");
	var res2 = [];
	for(i=0;i<res.length;i++){
		var test = await axios(res[i]).catch(err => err);
		if(test.status == 200){
			//test.config.url.slice(test.config.url.length - 5, test.config.url.length) != ".webp" ? res2.push(res[i]) : res3.push(res[i]);
			res2.push(res[i]);
		}
	}
	var filename = [];
	res2.forEach((x) => {
		filename.push(axios({
			url: x,
			method: "GET",
			responseType: "stream",
			headers: {
				'Content-Type': 'application/json'
			}
		}));
	});
	var filename = (await Promise.all(filename)).map(x => x.data);
	api.sendMessage({
		body: `${args[0]} trang ${args[1]}:`,
		attachment: filename
	}, data.threadID, data.messageID);
}

async function getdata(uri){
	var puppeteer = require("puppeteer-extra");
    const StealthPlugin = require('puppeteer-extra-plugin-stealth');
	puppeteer.use(StealthPlugin());
	const randomUseragent = require('random-useragent');
	const USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36';
	var test = true;
	let browser = await puppeteer.launch(
	  { headless: true, executablePath: process.env.CHROME_BIN || null, args: [
		'--enable-features=NetworkService', '--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'
	  ], ignoreHTTPSErrors: true, dumpio: false}
	);
	while (test) {
		//console.log("test");
		let page = await browser.newPage();
		const userAgent = randomUseragent.getRandom();
		const UA = userAgent || USER_AGENT;
		await page.setViewport({
			width: 1920 + Math.floor(Math.random() * 100),
			height: 3000 + Math.floor(Math.random() * 100),
			deviceScaleFactor: 1,
			hasTouch: false,
			isLandscape: false,
			isMobile: false,
		});
		await page.setUserAgent(UA);
		await page.setJavaScriptEnabled(true);
		await page.setDefaultNavigationTimeout(0);
		await page.goto(uri, { waitUntil: 'networkidle0' });
		var content = await page.content();
		//console.log(content);
		var res = await page.evaluate(() =>  {
			return document.querySelector("body").innerText; 
		});
		try{
			res = JSON.parse(res);
			test = false;
		}
		catch (e){
			test = true;
		}
		//test == true ? console.log("cloudflare lon. Retry") : "";
		//console.log(test, res);
	}
	await browser.close();
	return res;
}

async function getimage(uri, type){
	const cherio = require('cherio');
	var puppeteer = require("puppeteer-extra");
    const StealthPlugin = require('puppeteer-extra-plugin-stealth');
	puppeteer.use(StealthPlugin());
	const randomUseragent = require('random-useragent');
	const USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36';
	let browser = await puppeteer.launch(
	  { headless: true, executablePath: process.env.CHROME_BIN || null, args: [
		'--enable-features=NetworkService', '--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'
	  ], ignoreHTTPSErrors: true, dumpio: false}
	);
	var test = true;
	while (test){
		//console.log("test1");
		let page = await browser.newPage();
		const userAgent = randomUseragent.getRandom();
		const UA = userAgent || USER_AGENT;
		await page.setViewport({
			width: 1920 + Math.floor(Math.random() * 100),
			height: 3000 + Math.floor(Math.random() * 100),
			deviceScaleFactor: 1,
			hasTouch: false,
			isLandscape: false,
			isMobile: false,
		});
		await page.setUserAgent(UA);
		await page.setJavaScriptEnabled(true);
		await page.setDefaultNavigationTimeout(0);
		await page.goto(uri, { waitUntil: 'networkidle0' });
		var content = await page.content();
		//console.log(content);
		var $ = cherio.load(content);
		var links = [];
		$(type).each((index, image) => {
			links.push($(image).attr('src'));
		});
		test = false;
		links[1] == undefined ? test = true : (links[1].slice(0, 4) != "http" ? links[1] = "https://hentaiz.top" + links[1] : "");
		//test == true ? console.log("cloudflare lon. Retry") : "";
	}
	await browser.close();
	return links
}

function compareTwoStrings(first, second) {
  first = first.replace(/\s+/g, '')
  second = second.replace(/\s+/g, '')
  if (!first.length && !second.length) return 1;                   // if both are empty strings
  if (!first.length || !second.length) return 0;                   // if only one is empty string
  if (first === second) return 1;                      // identical
  if (first.length === 1 && second.length === 1) return 0;         // both are 1-letter strings
  if (first.length < 2 || second.length < 2) return 0;       // if either is a 1-letter string
  let firstBigrams = new Map();
  for (let i = 0; i < first.length - 1; i++) {
    const bigram = first.substring(i, i + 2);
    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;
    firstBigrams.set(bigram, count);
  }
  let intersectionSize = 0;
  for (let i = 0; i < second.length - 1; i++) {
    const bigram = second.substring(i, i + 2);
    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;
    if (count > 0) {
      firstBigrams.set(bigram, count - 1);
      intersectionSize++;
    }
  }
  return (2.0 * intersectionSize) / (first.length + second.length - 2);
}

function findBestMatch(mainString, targetStrings) {
  if (!areArgsValid(mainString, targetStrings)) throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');
  const ratings = [];
  let bestMatchIndex = 0;
  for (let i = 0; i < targetStrings.length; i++) {
    const currentTargetString = targetStrings[i];
    const currentRating = compareTwoStrings(mainString, currentTargetString)
    ratings.push({
      target: currentTargetString, 
      rating: currentRating
    });
    if (currentRating > ratings[bestMatchIndex].rating) {
      bestMatchIndex = i
    }
  }
  const bestMatch = ratings[bestMatchIndex]
  return { 
    ratings, 
    bestMatch, 
    bestMatchIndex 
  };
}

function areArgsValid(mainString, targetStrings) {
  if (typeof mainString !== 'string') return false;
  if (!Array.isArray(targetStrings)) return false;
  if (!targetStrings.length) return false;
  if (targetStrings.find(s => typeof s !== 'string')) return false;
  return true;
}

function removeVietnameseTones(str) {
    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g,"a"); 
    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g,"e"); 
    str = str.replace(/ì|í|ị|ỉ|ĩ/g,"i"); 
    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g,"o"); 
    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g,"u"); 
    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g,"y"); 
    str = str.replace(/đ/g,"d");
    str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, "A");
    str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "E");
    str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "I");
    str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "O");
    str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "U");
    str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "Y");
    str = str.replace(/Đ/g, "D");
    // Some system encode vietnamese combining accent as individual utf-8 characters
    // Một vài bộ encode coi các dấu mũ, dấu chữ như một kí tự riêng biệt nên thêm hai dòng này
    str = str.replace(/\u0300|\u0301|\u0303|\u0309|\u0323/g, ""); // ̀ ́ ̃ ̉ ̣  huyền, sắc, ngã, hỏi, nặng
    str = str.replace(/\u02C6|\u0306|\u031B/g, ""); // ˆ ̆ ̛  Â, Ê, Ă, Ơ, Ư
    // Remove extra spaces
    // Bỏ các khoảng trắng liền nhau
    str = str.replace(/ + /g," ");
    str = str.trim();
    // Remove punctuations
    // Bỏ dấu câu, kí tự đặc biệt
    //str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'|\"|\&|\#|\[|\]|~|\$|_|`|-|{|}|\||\\/g," ");
    return str;
}

function removeHTMLTags (str){
	str=str.replace(/<br>/gi, "");
	str=str.replace(/<br\s\/>/gi, "");
	str=str.replace(/<br\/>/gi, "");
	str=str.replace(/<p.*>/gi, "");
	str=str.replace("</p>", "");
	str=str.replace(/(\r\n|\n|\r)/gi, "");
	return str
}

module.exports = {
	init,
	category,
	posts,
	search,
	crawl
}